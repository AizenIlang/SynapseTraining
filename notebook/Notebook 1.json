{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "apuch",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "1b3e8ea8-08a0-4248-a321-6a44d794b906"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"5368407e-c246-4bbd-9bcd-035faa209fe0": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "1",
										"1": "190167.33999999636",
										"2": "2.8735733929704184"
									},
									{
										"0": "2",
										"1": "49399.7400000001",
										"2": "3.130726915520635"
									},
									{
										"0": "3",
										"1": "14790.389999999987",
										"2": "2.884803978935047"
									},
									{
										"0": "4",
										"1": "8558.350000000004",
										"2": "2.9976707530648"
									},
									{
										"0": "5",
										"1": "17187.240000000013",
										"2": "2.8550232558139554"
									},
									{
										"0": "6",
										"1": "10741.91",
										"2": "2.8798686327077747"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "PassengerCount",
										"type": "int"
									},
									{
										"key": "1",
										"name": "SumTripDistance",
										"type": "double"
									},
									{
										"key": "2",
										"name": "AvgTripDistance",
										"type": "double"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6a4ac82e-930e-4e4d-b385-3cc2c61db5c6/resourceGroups/crs_resourcegroup/providers/Microsoft.Synapse/workspaces/trainingpractice/bigDataPools/apuch",
				"name": "apuch",
				"type": "Spark",
				"endpoint": "https://trainingpractice.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/apuch",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"df = spark.read.load('abfss://fscrslake@crslake.dfs.core.windows.net/input/NYCTripSmall.parquet')\n",
					""
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.mode(\"overwrite\").saveAsTable(\"trip\")"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df = spark.sql(\"\"\"\r\n",
					"   SELECT PassengerCount,\r\n",
					"       SUM(TripDistanceMiles) as SumTripDistance,\r\n",
					"       AVG(TripDistanceMiles) as AvgTripDistance\r\n",
					"   FROM trip\r\n",
					"   WHERE TripDistanceMiles > 0 AND PassengerCount > 0\r\n",
					"   GROUP BY PassengerCount\r\n",
					"   ORDER BY PassengerCount\r\n",
					"\"\"\") \r\n",
					"display(df)\r\n",
					"df.write.saveAsTable(\"passengercountstats\")"
				],
				"attachments": null,
				"execution_count": 10
			}
		]
	}
}